{"version":3,"sources":["component/card/card.component.jsx","component/card-list/cardList.component.jsx","component/search/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","Search","placeholder","handleChange","type","onChange","App","state","searchField","a","fetch","res","json","users","this","setState","console","log","filteredmonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2VAGaA,EAAO,SAACC,GACjB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,8BAAwEC,IAAI,YACpF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCHbC,G,MAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMS,SAASC,KAAI,SAAAP,GAChB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJzBO,G,MAAS,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAClC,OAAO,uBACHZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCHG,E,kDApCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJH,E,4FAQd,8BAAAC,EAAA,+EAEsBC,MAAM,8CAF5B,cAEUC,EAFV,gBAGwBA,EAAIC,OAH5B,OAGUC,EAHV,OAIIC,KAAKC,SAAS,CAAEhB,SAAUc,IAJ9B,kDAOIG,QAAQC,IAAI,SAAZ,MAPJ,0D,0EAWA,WAAU,IAAD,SAC2BH,KAAKP,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZU,EAAmBnB,EAASoB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQG,KAAKwB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK7B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAQW,YAAY,kBAClBC,aAAc,SAAAmB,GAAC,OAAI,EAAKP,SAAS,CAAEP,YAAac,EAAEC,OAAOC,WAE3D,cAAC,EAAD,CAAUzB,SAAUmB,W,GA/BVO,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bd9a7847.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => {\r\n    return <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}.png?set=set2&size=180x180`} alt=\"monster\" />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n}\r\n\r\n","import React from 'react'\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => {\r\n    return <div className='card-list'>\r\n        {props.monsters.map(monster => {\r\n            return <Card key={monster.id} monster={monster} />\r\n        })}\r\n    </div>\r\n}","import React from \"react\";\r\nimport './search.styles.css'\r\n\r\nexport const Search = ({ placeholder, handleChange }) => {\r\n    return <input\r\n        className='search'\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n}","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './component/card-list/cardList.component'\nimport { Search } from './component/search/search.component';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const users = await res.json();\n      this.setState({ monsters: users })\n    }\n    catch (e) {\n      console.log(\"Error!\", e)\n    }\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredmonsters = monsters.filter(monster => (\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    ));\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <Search placeholder=\"search monsters\"\n          handleChange={e => this.setState({ searchField: e.target.value })\n          } />\n        <CardList monsters={filteredmonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}